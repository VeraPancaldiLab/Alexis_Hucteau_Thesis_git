colnames(corr) <- colnames(DATA)
if(TF){
color= rev(colorRampPalette(brewer.pal(n = 9, name = "RdBu"))(100))
}else{
color = colorRampPalette(brewer.pal(n = 9, name = "YlOrRd"))(100)
}
}else{
corr=DATA
color= rev(colorRampPalette(brewer.pal(n = 9, name = "RdBu"))(100))
}
title <- paste0(title, " ", method)
heatmap <- pheatmap(corr,
color = color,
annotation_col = annotation_for_heatmap,
annotation_colors = annotation_color,
legend = TRUE,
treeheight_row = 20,
main = title,
fontsize = 10,
cutree_cols = cuttree
)
return(heatmap)
}
Var_reactions <- rowVars(as.matrix(mIDHi_react_scores_GEM))
names(Var_reactions) <- rownames(mIDHi_react_scores_GEM)
t_test_pheno_comp <- function(pheno_df, phenoA, phenoB, df){
res <- row_t_welch(df[, pheno_df == phenoA], df[, pheno_df == phenoB]) %>%
dplyr::filter(pvalue < 0.05) %>%
t()
colnames(res) <- stringr::str_remove(colnames(res), pattern = "_pos")
colnames(res) <- stringr::str_remove(colnames(res), pattern = "_neg")
res[,!duplicated(colnames(res))] %>% t() %>% data.frame()
}
KOICHI_IDHm_analysis <- t_test_pheno_comp(IDHm_pheno, "IDH1", "IDH2", mIDHi_react_scores_GEM)
write.table(KOICHI_IDHm_analysis, "../Results/Metabolism/KOICHI_mIDH_T_test.tsv", sep = "\t", row.names = F)
View(KOICHI_IDHm_analysis)
library(biomaRt)
Human_GEM <- read.csv("../Datasets/Human_GEM_2.csv")
Metabo_reactions <- stringr::str_split(Human_GEM$EQUATION, pattern = "\\+ | => | <=>")
names(Metabo_reactions) <- Human_GEM$ID
Metabolic_network <- lapply(names(Metabo_reactions), function(reaction){
purrr::reduce(.f = function(a, b) rbind(a, data.frame(A = reaction, B = b)), .x = Metabo_reactions[[reaction]], .init = data.frame(A  = reaction, B = Metabo_reactions[[reaction]][1]))[-1,]
}) %>% rbindlist()
Metabolic_network_clean <- dplyr::filter(Metabolic_network, B != "")
Metabolic_network_clean$B <- stringr::str_trim(Metabolic_network_clean$B)
Remove_coeff <- function(metab){
if(length(metab) > 1){
ifelse(stringr::str_detect(metab[1], pattern = "[:alpha:]"), Reduce(x=metab, f = paste), Reduce(x=metab[-1], f = paste))
}else{
metab
}
}
Metabolic_network_clean$B <- sapply(Metabolic_network_clean$B, function(metabolite){
stringr::str_split(metabolite, pattern = "[:space:]") %>% .[[1]] %>% Remove_coeff()
})
Metabolic_network_clean <- unique(Metabolic_network_clean)
write.table(Metabolic_network_clean, "../Results/Metabolism/Metabolic_network_clean.tsv", sep = "\t", row.names = F, quote = F)
Gene_to_convert <- Human_GEM$GENE.ASSOCIATION %>% stringr::str_split(pattern = " or ") %>% unlist() %>% unique()
ensembl = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
genes_annotated <- getBM(attributes = c('hgnc_symbol', 'ensembl_gene_id'), filters = 'ensembl_gene_id', values = Gene_to_convert, mart = ensembl)
Reaction_Gene_asso <- Human_GEM[,c(1,4)]
Gene_reactions <- stringr::str_split(Reaction_Gene_asso$GENE.ASSOCIATION, pattern = " or ")
names(Gene_reactions) <- Human_GEM$ID
Gene_converter <- genes_annotated$hgnc_symbol
names(Gene_converter) <- genes_annotated$ensembl_gene_id
Gene_reactions <- lapply(Gene_reactions, function(reaction){
sapply(reaction, function(gene){
Gene_converter[gene]
}) %>% unique()
})
Gene_reactions_network <- lapply(names(Gene_reactions), function(reaction){
purrr::reduce(.f = function(a, b) rbind(a, data.frame(A = reaction, B = b)), .x = Gene_reactions[[reaction]], .init = data.frame(A  = reaction, B = Gene_reactions[[reaction]][1]))[-1,]
}) %>% data.table::rbindlist
Gene_reactions_network <- lapply(names(Gene_reactions), function(reaction){
purrr::reduce(.f = function(a, b) rbind(a, data.frame(A = reaction, B = b)), .x = Gene_reactions[[reaction]], .init = data.frame(A  = reaction, B = Gene_reactions[[reaction]][1]))[-1,]
})
Gene_reactions_network <- data.table::rbindlist(Gene_reactions_network)
Gene_reactions_network_cleaned <- na.omit(Gene_reactions_network)
Gene_reactions_network_cleaned <- dplyr::filter(Gene_reactions_network_cleaned, B != "")
Gene_reactions_network_cleaned_filtered <- Gene_reactions_network_cleaned[Gene_reactions_network_cleaned$A %in% rownames(KOICHI_IDHm_analysis),]
write.table(Gene_reactions_network_cleaned, "../Results/Metabolism/Gene_reactions_network.tsv", sep = "\t", row.names = F, quote = F)
write.table(Gene_reactions_network_cleaned_filtered, "../Results/Metabolism/KOICHI_IDHm_Gene_reactions_network_filtered.tsv", sep = "\t", row.names = F, quote = F)
KOICHI_IDHm_analysis$name <- rownames(KOICHI_IDHm_analysis)
KOICHI_IDHm_analysis[,c("name", "pvalue", "mean.diff")] %>% write.table("../Results/Metabolism/KOICHI_IDHm_Metabolic_features_filtered.tsv", sep = "\t", quote = F, row.names = F)
Metabolic_network_clean_KOICHI_IDHm <- dplyr::filter(Metabolic_network_clean, A %in% KOICHI_IDHm_analysis$name)
Metabolic_network_clean_KOICHI_IDHm_filtered <- Metabolic_network_clean_KOICHI_IDHm
Metabolic_network_clean_KOICHI_IDHm_filtered$B <- stringr::str_replace_all(Metabolic_network_clean_KOICHI_IDHm_filtered$B, pattern = " ", replacement = ",")
write.table(Metabolic_network_clean_KOICHI_IDHm_filtered, "../Results/Metabolism/Metabolic_network_clean_filtered_KOICHI_IDHm.tsv", sep = "\t", row.names = F, quote = F)
View(Metabolic_network_clean_KOICHI_IDHm_filtered)
data(dorothea_hs, package = "dorothea")
dorothea_regulon <- dorothea_hs %>%
filter(confidence %in% c("A", "B"))
rm(list = ls())
library(ggvenn)
library(FactoMineR)
library(igraph)
library(limma)
library(viper)
library(stringr)
library(data.table)
library(dplyr)
library(RCy3)
library(factoextra)
library(pheatmap)
library(Hmisc)
library(matrixStats)
library(RColorBrewer)
library(clusterProfiler)
library(enrichplot)
library(DOSE)
library(ggnewscale)
library(org.Hs.eg.db)
library(pathview)
library(EnhancedVolcano)
library(aracne.networks)
"%ni%" <- Negate("%in%")
wd <- "~/GitHub/Thesis_paper/"
source("~/Core_scripts/msviper_functions.R")
source("~/Core_scripts/core_functions.R")
"%ni%" <- Negate("%in%")
data(regulonlaml)
viper_regulons2dorothea <- function(r) {
res <- r %>%
purrr::map_df(
.f = function(i) {
tf_target <- i$tfmode %>%
tibble::enframe(name = "target", value = "mor") %>%
mutate(likelihood = i$likelihood)
},
.id = "tf"
)
return(res)
}
regulonaml <- viper_regulons2dorothea(regulonlaml)
regulonaml_SYMBOL <- data.frame("tf" = GeneAnswers::getSymbols(regulonaml$tf, data = "org.Hs.eg"),
"target" = GeneAnswers::getSymbols(regulonaml$target, data = "org.Hs.eg"),
"mor" = regulonaml$mor,
"likelihood" = regulonaml$likelihood)
data(dorothea_hs, package = "dorothea")
dorothea_regulon <- dorothea_hs %>%
filter(confidence %in% c("A", "B"))
rm(list = ls())
suppressPackageStartupMessages({
library(FactoMineR)
library(igraph)
library(limma)
library(viper)
library(stringr)
library(data.table)
library(dplyr)
library(RCy3)
library(factoextra)
library(pheatmap)
library(Hmisc)
library(matrixStats)
library(RColorBrewer)
})
"%ni%" <- Negate("%in%")
wd <- "~/GitHub/Thesis_paper/"
source("~/Core_scripts/msviper_functions.R")
BEATAML_raw_count <- read.table("/media/alexis/DATA/Thesis_paper_DATA/beataml_waves1to4_counts_dbgap.txt", sep = "\t")
View(BEATAML_raw_count)
BEATAML_raw_count <- read.table("/media/alexis/DATA/Thesis_paper_DATA/beataml_waves1to4_counts_dbgap.txt", sep = "\t", header = T)
View(BEATAML_raw_count)
View(BEATAML_raw_count)
duplicated(BEATAML_raw_count$display_label) %>% table
BEATAML_raw_count %>% dplyr::filter(display_label %in% duplicated(BEATAML_raw_count$display_label))
BEATAML_raw_count %>% dplyr::filter(display_label %in% duplicated(BEATAML_raw_count$display_label)) %>% View()
BEATAML_raw_count %>% dplyr::filter(display_label %in% BEATAML_raw_count$display_label[duplicated(BEATAML_raw_count$display_label)]) %>% View()
Combine_duplicated_gene_names_transcriptome <- function(transcriptome, colgenes){
gene_list <- unique(transcriptome[,colgenes])
transcriptome <- transcriptome %>%
split(., .[colgenes]) %>%
lapply(., function(x){
l <- length(x[1,]) - 1
cnames <- colnames(x)[c(1:l)]
df <- x[,c(1:l)] %>%
as.matrix(.) %>%
colMaxs(.) %>%
data.frame(.) %>%
t(.) %>%
data.frame(.)
colnames(df) <- cnames
df
}) %>%
rbindlist(.) %>%
data.frame(., check.names = F)
rownames(transcriptome) <- gene_list
transcriptome
Combine_duplicated_gene_names_transcriptome <- function(transcriptome, colgenes){
gene_list <- unique(transcriptome[,colgenes])
transcriptome <- transcriptome %>%
split(., .[colgenes]) %>%
lapply(., function(x){
l <- length(x[1,]) - 1
cnames <- colnames(x)[c(1:l)]
df <- x[,c(1:l)] %>%
as.matrix(.) %>%
colMaxs(.) %>%
data.frame(.) %>%
t(.) %>%
data.frame(.)
colnames(df) <- cnames
df
}) %>%
rbindlist(.) %>%
data.frame(., check.names = F)
rownames(transcriptome) <- gene_list
transcriptome
}
BEATAML_RNAseq <- Combine_duplicated_gene_names_transcriptome(BEATAML_raw_count[,c(5:711,2)], "display_label")
Mapping_BEATAML <- readxl::read_xlsx("../Datasets/beataml_waves1to4_sample_mapping.xlsx", sheet = 1)
View(Mapping_BEATAML)
Clinical_data_beataml_RNAseq <- read.table("../Datasets/Clinical_BEATAML_data.tsv", sep = "\t", header= T)
Clinical_data_beataml_RNAseq <- read.table("../Datasets/Clinical_BEATAML_data.tsv", sep = "\t", header= T)
Clinical_data_beataml_RNAseq <- read.table("../Datasets/Clinical_BEATAML_data.tsv", sep = "\t", header= T, na.strings = "")
Clinical_data_beataml_RNAseq <- read.table("../Datasets/Clinical_BEATAML_data.tsv", sep = "\t", header= T, stringsAsFactors = T)
Clinical_data_beataml_RNAseq <- read.table("../Datasets/Clinical_BEATAML_data.tsv", sep = "\t", header= T, quote = T)
Clinical_data_beataml_RNAseq <- read.table("../Datasets/Clinical_BEATAML_data.tsv", sep = "\t", header= T, check.names = F)
Clinical_data_beataml_RNAseq <- read.table("../Datasets/Clinical_BEATAML_data.tsv", sep = "\t", header= T, check.names = F, strip.white = T)
Clinical_data_beataml_RNAseq <- read.table("../Datasets/Clinical_BEATAML_data.tsv", sep = "\t", header= T, check.names = F, na.strings = "")
Clinical_BEATAML_data <- readxl::read_xlsx("../Datasets/beataml_wv1to4_clinical.xlsx", sheet = 1)
Convertisseur_BEATAML_1 <- readxl::read_xlsx("../Datasets/beataml_waves1to4_sample_mapping.xlsx", sheet = 1)
View(Convertisseur_BEATAML_1)
Convertisseur_BEATAML_2 <- read.table("../Datasets/Data_conversion.tsv", sep = "\t", header = F) %>% .[2:3]
View(Convertisseur_BEATAML_2)
View(Convertisseur_BEATAML_1)
View(Clinical_BEATAML_data)
View(Clinical_BEATAML_data)
Clinical_BEATAML_RNAseq_data <- dplyr::filter(Clinical_BEATAML_data, dpgap_rnaseq_sample %in% colnames(BEATAML_raw_count))
Clinical_BEATAML_RNAseq_data <- dplyr::filter(Clinical_BEATAML_data, dbgap_rnaseq_sample %in% colnames(BEATAML_raw_count))
View(Clinical_BEATAML_RNAseq_data)
Phenotypes_dnaseq <- read.table("/media/alexis/DATA/Thesis_paper_DATA/BEATAML_DNAmethylation/GSE159907_RAW/Phenotypes.csv", sep =",", header = T)
View(Phenotypes_dnaseq)
colnames(BEATAML_raw_count)
colnames(BEATAML_raw_count)[5:711]
colnames(BEATAML_raw_count)[5:711] %in% Clinical_BEATAML_RNAseq_data$dbgap_rnaseq_sample
colnames(BEATAML_raw_count)[5:711] %in% Clinical_BEATAML_RNAseq_data$dbgap_rnaseq_sample %>% table
View(BEATAML_raw_count)
View(Clinical_BEATAML_RNAseq_data)
View(Clinical_BEATAML_data)
Clinical_BEATAML_RNAseq_data$dbgap_rnaseq_sample %>% duplicated
Clinical_BEATAML_RNAseq_data$dbgap_rnaseq_sample %>% duplicated %>% table
BEATAML_raw_count <- read.table("/media/alexis/DATA/Thesis_paper_DATA/beataml_waves1to4_counts_dbgap.txt", sep = "\t", header = T)
BEATAML_raw_count <- read.table("/media/alexis/DATA/Thesis_paper_DATA/beataml_waves1to4_counts_dbgap.txt", sep = "\t", header = T)
Clinical_BEATAML_data <- readxl::read_xlsx("../Datasets/beataml_wv1to4_clinical.xlsx", sheet = 1)
Clinical_BEATAML_RNAseq_data <- dplyr::filter(Clinical_BEATAML_data, dbgap_rnaseq_sample %in% colnames(BEATAML_raw_count))
colnames(BEATAML_raw_count)[5:711] %in% Clinical_BEATAML_RNAseq_data$dbgap_rnaseq_sample %>% table
Clinical_BEATAML_RNAseq_data$variantSummary %>% table
Clinical_BEATAML_RNAseq_data$variantSummary %>% stringr::str_split(., "\\|") %>% c %>% table
Clinical_BEATAML_RNAseq_data$variantSummary %>% stringr::str_split(., "\\|")
Clinical_BEATAML_RNAseq_data$variantSummary %>% stringr::str_split(., "\\|") %>% unlist
Clinical_BEATAML_RNAseq_data$variantSummary %>% stringr::str_split(., "\\|") %>% unlist %>% table
Clinical_BEATAML_RNAseq_data$variantSummary %>% stringr::str_split(., "\\|") %>% unlist %>% table %>% View
Pheno_IDH <- colnames(Clinical_BEATAML_RNAseq_data)[5:711] %>% sapply(function(sample){
mutations <- dplyr::filter(Clinical_BEATAML_RNAseq_data, dbgap_rnaseq_sample == sample) %>% .$variantSummary
stringr::str_detect(mutations, "IDH")
})
Pheno_IDH <- colnames(BEATAML_raw_count)[5:711] %>% sapply(function(sample){
mutations <- dplyr::filter(Clinical_BEATAML_RNAseq_data, dbgap_rnaseq_sample == sample) %>% .$variantSummary
stringr::str_detect(mutations, "IDH")
})
BEATAML_raw_count_clinicaled <- BEATAML_raw_count[,c(F,T,F,F, colnames(BEATAML_raw_count)[5:711] %in% Clinical_BEATAML_RNAseq_data$dbgap_rnaseq_sample)]
Pheno_IDH <- colnames(BEATAML_raw_count)[2:672] %>% sapply(function(sample){
mutations <- dplyr::filter(Clinical_BEATAML_RNAseq_data, dbgap_rnaseq_sample == sample) %>% .$variantSummary
stringr::str_detect(mutations, "IDH")
})
Pheno_IDH <- colnames(BEATAML_raw_count)[2:672] %>% sapply(function(sample){
mutations <- dplyr::filter(Clinical_BEATAML_RNAseq_data, dbgap_rnaseq_sample == sample) %>% .$variantSummary
stringr::str_detect(mutations, "IDH")
}) %>% unlist
Pheno_IDH %>% table
710-91
Pheno_IDH <- colnames(BEATAML_raw_count_clinicaled)[2:672] %>% sapply(function(sample){
mutations <- dplyr::filter(Clinical_BEATAML_RNAseq_data, dbgap_rnaseq_sample == sample) %>% .$variantSummary
stringr::str_detect(mutations, "IDH")
}) %>% unlist
Pheno_IDH %>% table
Pheno_IDH %>% table
Pheno_IDH <- colnames(BEATAML_raw_count)[5:711] %>% sapply(function(sample){
mutations <- dplyr::filter(Clinical_BEATAML_RNAseq_data, dbgap_rnaseq_sample == sample) %>% .$variantSummary
stringr::str_detect(mutations, "IDH")
}) %>% unlist
Pheno_IDH %>% table
Pheno_IDH <- colnames(BEATAML_raw_count)[2:672] %>% sapply(function(sample){
mutations <- dplyr::filter(Clinical_BEATAML_RNAseq_data, dbgap_rnaseq_sample == sample) %>% .$variantSummary
stringr::str_detect(mutations, "IDH")
}) %>% unlist
Pheno_IDH <- colnames(BEATAML_raw_count)[2:672] %>% sapply(function(sample){
mutations <- dplyr::filter(Clinical_BEATAML_RNAseq_data, dbgap_rnaseq_sample == sample) %>% .$variantSummary
stringr::str_detect(mutations, "IDH")
}) %>% unlist
Pheno_IDH %>% table
Pheno_IDH <- colnames(BEATAML_raw_count_clinicaled)[2:672] %>% sapply(function(sample){
mutations <- dplyr::filter(Clinical_BEATAML_RNAseq_data, dbgap_rnaseq_sample == sample) %>% .$variantSummary
stringr::str_detect(mutations, "IDH")
}) %>% unlist
Pheno_IDH <- colnames(BEATAML_raw_count_clinicaled)[2:672] %>% sapply(function(sample){
mutations <- dplyr::filter(Clinical_BEATAML_RNAseq_data, dbgap_rnaseq_sample == sample) %>% .$variantSummary
stringr::str_detect(mutations, "IDH")
}) %>% unlist
Pheno_IDH %>% table
670-97
BEATAML_IDHm_RawCounts <- BEATAML_raw_count_clinicaled[, c(T, Pheno_IDH)]
c(T, Pheno_IDH)
BEATAML_IDHm_RawCounts <- BEATAML_raw_count_clinicaled[, c(T, unname(Pheno_IDH))]
c(T, Pheno_IDH)
Pheno_IDH <- ifelse(is.na(Pheno_IDH), F, ifelse(Pheno_IDH, T, F))
BEATAML_IDHm_RawCounts <- BEATAML_raw_count_clinicaled[, c(T, Pheno_IDH)]
View(BEATAML_IDHm_RawCounts)
BEATAML_IDHm_RawCounts <- BEATAML_IDHm_RawCounts[,c(2:98,1)]
View(BEATAML_IDHm_RawCounts)
colnames(BEATAML_IDHm_RawCounts)[98]
BEATAML_IDHm_RawCounts_computed <- Combine_duplicated_gene_names_transcriptome(BEATAML_IDHm_RawCounts, colgenes = "display_label")
View(BEATAML_IDHm_RawCounts_computed)
write.table(BEATAML_IDHm_RawCounts_computed, "../Datasets/BEATAML_IDHm_RawCounts_computed.tsv", sep = "\t")
write.table(BEATAML_IDHm_RawCounts_computed, "../Datasets/BEATAML_IDHm_RawCounts_computed.tsv", sep = "\t", col.names = NA)
Voom_BEATAML <- voom(BEATAML_IDHm_RawCounts_computed)$E
View(Voom_BEATAML)
Pheno_IDH_BEATAML <- sapply(colnames(BEATAML_IDHm_RawCounts_computed), function(samples){
mutations <- dplyr(Clinical_BEATAML_RNAseq_data, dbgap_rnaseq_sample == samples) %>% .$variantSummary
IDH1 <- stringr::str_detect(mutations, pattern = "IDH1")
IDH2 <- stringr::str_detect(mutations, pattern = "IDH2")
dIDH <- IDH1 & IDH2
ifelse(dIDH, "mIDH1&2", ifelse(IDH1, "mIDH1", "IDH2"))
})
Pheno_IDH_BEATAML <- sapply(colnames(BEATAML_IDHm_RawCounts_computed), function(samples){
mutations <- dplyr::filter(Clinical_BEATAML_RNAseq_data, dbgap_rnaseq_sample == samples) %>% .$variantSummary
IDH1 <- stringr::str_detect(mutations, pattern = "IDH1")
IDH2 <- stringr::str_detect(mutations, pattern = "IDH2")
dIDH <- IDH1 & IDH2
ifelse(dIDH, "mIDH1&2", ifelse(IDH1, "mIDH1", "IDH2"))
})
Pheno_IDH_BEATAML %>% table
res.pca <- prcomp(t(BEATAML_IDHm_RawCounts_computed))
p <- fviz_pca_ind(res.pca, label="all", habillage = Pheno_IDH_BEATAML,
addEllipses=T, ellipse.level=0.95)
p <- p + ggtitle("PCA gene expression")
p
png("../Results/DGEA/PCA_RNAseq_BEATAML_data.png")
p
dev.off()
res.pca <- prcomp(t(Voom_BEATAML))
p <- fviz_pca_ind(res.pca, label="all", habillage = Pheno_IDH_BEATAML,
addEllipses=T, ellipse.level=0.95)
p <- p + ggtitle("PCA gene expression")
p
png("../Results/DGEA/PCA_voom_RNAseq_BEATAML_data.png")
p
dev.off()
write.table(Voom_BEATAML, "../Datasets/Voom_BEATAML.tsv", sep = "\t")
Make_heatmap <- function(DATA, Phenotype, method = "pearson", title, annotation_color, kmeans_k = NA, cuttree = NA, corr=T, TF=F) {
annotation_for_heatmap <- data.frame(Phenotype = Phenotype$Phenotype)
rownames(annotation_for_heatmap) <- colnames(DATA)
if(corr){
corr <- rcorr(as.matrix(DATA), type = method)$r
colnames(corr) <- colnames(DATA)
if(TF){
color= rev(colorRampPalette(brewer.pal(n = 9, name = "RdBu"))(100))
}else{
color = colorRampPalette(brewer.pal(n = 9, name = "YlOrRd"))(100)
}
}else{
corr=DATA
color= rev(colorRampPalette(brewer.pal(n = 9, name = "RdBu"))(100))
}
title <- paste0(title, " ", method)
heatmap <- pheatmap(corr,
color = color,
annotation_col = annotation_for_heatmap,
annotation_colors = annotation_color,
legend = TRUE,
treeheight_row = 20,
main = title,
fontsize = 10,
cutree_cols = cuttree
)
return(heatmap)
}
Var_gene <- rowVars(as.matrix(Voom_BEATAML))
names(Var_gene) <- rownames(Voom_BEATAML)
nb_genes <- 50
method <- "pearson"
Top_var_genes <- Var_gene[order(Var_gene, decreasing = T)] %>% .[1:nb_genes]
Top_Var_RNAseq <- Voom_BEATAML %>% .[rownames(.) %in% names(Top_var_genes),]
ann_color_RNA <- list(
Phenotype = c(IDHwt = "blue", mIDH1 = "red", mIDH2 = "orange"))
pheno_heatmap <- data.frame("IDHwt" = Pheno_BEATAML == "IDHwt", "mIDH1" = Pheno_BEATAML == "mIDH1", "mIDH2" = Pheno_BEATAML == "mIDH2")
rm(list = ls())
library(ggvenn)
library(FactoMineR)
library(igraph)
library(limma)
library(viper)
library(stringr)
library(data.table)
library(dplyr)
library(RCy3)
library(factoextra)
library(pheatmap)
library(Hmisc)
library(matrixStats)
library(RColorBrewer)
library(clusterProfiler)
library(enrichplot)
library(DOSE)
library(ggnewscale)
library(org.Hs.eg.db)
library(pathview)
library(EnhancedVolcano)
library(aracne.networks)
"%ni%" <- Negate("%in%")
wd <- "~/GitHub/Thesis_paper/"
source("~/Core_scripts/msviper_functions.R")
source("~/Core_scripts/core_functions.R")
"%ni%" <- Negate("%in%")
data(regulonlaml)
viper_regulons2dorothea <- function(r) {
res <- r %>%
purrr::map_df(
.f = function(i) {
tf_target <- i$tfmode %>%
tibble::enframe(name = "target", value = "mor") %>%
mutate(likelihood = i$likelihood)
},
.id = "tf"
)
return(res)
}
regulonaml <- viper_regulons2dorothea(regulonlaml)
regulonaml_SYMBOL <- data.frame("tf" = GeneAnswers::getSymbols(regulonaml$tf, data = "org.Hs.eg"),
"target" = GeneAnswers::getSymbols(regulonaml$target, data = "org.Hs.eg"),
"mor" = regulonaml$mor,
"likelihood" = regulonaml$likelihood)
data(dorothea_hs, package = "dorothea")
dorothea_regulon <- dorothea_hs %>%
filter(confidence %in% c("A", "B"))
RNAseqBEATAML <- read.table("/media/alexis/DATA/Thesis_paper_DATA/Voom_BEATAML.tsv", sep = "\t", header = T)
Pheno_BEATAML <- sapply(colnames(RNAseqBEATAML), function(samples){
IDH1 <- stringr::str_detect(samples, pattern = "mIDH1")
IDH2 <- stringr::str_detect(samples, pattern = "mIDH2")
ifelse(IDH1, "mIDH1", ifelse(IDH2, "mIDH2", "wtIDH"))
})
RNAseqBEATAML <- RNAseqBEATAML[Pheno_BEATAML != "wtIDH"]
Pheno_BEATAML_IDH <- Pheno_BEATAML[Pheno_BEATAML != "wtIDH"]
DEG_IDH_BEATAML <- Differential_analysis(Pheno_BEATAML_IDH, RNAseqBEATAML)$`mIDH1-mIDH2`
DEG_IDH_BEATAML %>% write.table("../Results/DGEA/DEGs_tables/DEG_IDH_BEATAML.tsv", sep = "\t")
DEG_IDH_BEATAML <- Differential_analysis(Pheno_BEATAML_IDH, RNAseqBEATAML)
RNAseqBEATAML <- read.table("../Datasets/Voom_BEATAML.tsv", sep = "\t", header = T)
View(RNAseqBEATAML)
Pheno_BEATAML
Clinical_BEATAML_RNAseq_data <- readxl::read_xlsx("../Datasets/beataml_wv1to4_clinical.xlsx", sheet = 1)
Pheno_IDH_BEATAML <- sapply(colnames(RNAseqBEATAML), function(samples){
mutations <- dplyr::filter(Clinical_BEATAML_RNAseq_data, dbgap_rnaseq_sample == samples) %>% .$variantSummary
IDH1 <- stringr::str_detect(mutations, pattern = "IDH1")
IDH2 <- stringr::str_detect(mutations, pattern = "IDH2")
dIDH <- IDH1 & IDH2
ifelse(dIDH, "mIDH1&2", ifelse(IDH1, "mIDH1", "IDH2"))
})
Pheno_IDH_BEATAML %>% table
DEG_IDH_BEATAML <- Differential_analysis(Pheno_IDH_BEATAML, RNAseqBEATAML)
View(DEG_IDH_BEATAML)
View(DEG_IDH_BEATAML[["IDH2-mIDH1"]])
DEG_IDH_BEATAML$`IDH2-mIDH1`$logFC <- -DEG_IDH_BEATAML$`IDH2-mIDH1`$logFC
DEG_IDH_BEATAML$`IDH2-mIDH1` %>% write.table("../Results/DGEA/DEGs_tables/DEG_IDH_BEATAML.tsv", sep = "\t")
View(DEG_IDH_BEATAML)
DEG_IDH_BEATAML <- Differential_analysis(Pheno_IDH_BEATAML, RNAseqBEATAML)
DEG_IDH_BEATAML$`IDH2-mIDH1`$logFC <- -DEG_IDH_BEATAML$`IDH2-mIDH1`$logFC
rm(regulonlaml)
dorothea_regulon <- dorothea_regulon[,c(1,3)]
rm(list = ls())
library(ggvenn)
library(FactoMineR)
library(igraph)
library(limma)
library(viper)
library(stringr)
library(data.table)
library(dplyr)
library(RCy3)
library(factoextra)
library(pheatmap)
library(Hmisc)
library(matrixStats)
library(RColorBrewer)
library(clusterProfiler)
library(enrichplot)
library(DOSE)
library(ggnewscale)
library(org.Hs.eg.db)
library(pathview)
library(EnhancedVolcano)
library(aracne.networks)
"%ni%" <- Negate("%in%")
wd <- "~/GitHub/Thesis_paper/"
source("~/Core_scripts/msviper_functions.R")
source("~/Core_scripts/core_functions.R")
"%ni%" <- Negate("%in%")
data(regulonlaml)
viper_regulons2dorothea <- function(r) {
res <- r %>%
purrr::map_df(
.f = function(i) {
tf_target <- i$tfmode %>%
tibble::enframe(name = "target", value = "mor") %>%
mutate(likelihood = i$likelihood)
},
.id = "tf"
)
return(res)
}
regulonaml <- viper_regulons2dorothea(regulonlaml)
