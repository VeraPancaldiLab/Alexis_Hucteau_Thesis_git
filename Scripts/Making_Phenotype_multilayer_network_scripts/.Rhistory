rm(DmIALite, DOLite, DOLiteTerm, HsIALite, MmIALite, RnIALite)
# library(biomaRt)
library(DOSE)
library(ReactomePA)
library(pathview)
library(forcats)
library(ggstance)
library(enrichplot)
library(ggrepel)
library(GGally)
library(dplyr)
library(RCy3)
library(igraph)
library(data.table)
library(stringr)
library(clusterProfiler)
library(ggplot2)
library(muxViz)
library(grid)
library(ggraph)
library(RColorBrewer)
library(viridis)
library(parallel)
library(ggpubr)
library(corrplot)
library(org.Hs.eg.db)
cores2use <- detectCores() - 2
"%ni%" <- Negate("%in%")
View(GO_Analysis_0.5)
View(GO_Analysis_0.5[["Old_Clusters"]][["Enrichments"]][["BOTH"]][["WIKIpathway"]][["Readable_enrichment"]]@result)
load("/media/alexis/DATA/Session/R_session/Thesis_paper_Rsessions/Multi_layer_phenolike/Analysing_Multilayer_Versatility.RData")
library(stringr)
gfg <- "Geeks9For2Geeks"
# Using strsplit() method
answer <- strsplit(gfg, split = "[0-9]+")
gfg <- "Geeks9For2Geeks"
# Using strsplit() method
answer <- strsplit(gfg, split = "[0-9]+")[[1]]
gfg <- "Geeks/For/Geeks"
answer <- strsplit(gfg, split = "\\/")[[1]]
gfg <- "Geeks/For/Geeks"
answer <- strsplit(gfg, split = "\\/")[[1]]
gfg <- c("Geeks/For/Geeks", "Geeks/For/Geeks", "Geeks/For/Geeks", "Geeks/For/Geeks", "Geeks/For/Geeks", "Geeks/For/Geeks")
answer <- strsplit(gfg, split = "\\/")[[1]]
answer <- strsplit(gfg, split = "\\/")
answer <- strsplit(gfg, split = "\\/")[2]
answer <- strsplit(gfg, split = "\\/")
answer <- strsplit(gfg, split = "\\/") %>% sapply(function(date){date[2]})
rm(DmIALite, DOLite, DOLiteTerm, HsIALite, MmIALite, RnIALite)
library(biomaRt)
library(DOSE)
library(ReactomePA)
library(pathview)
library(forcats)
library(ggstance)
library(enrichplot)
library(ggrepel)
library(GGally)
library(dplyr)
library(RCy3)
library(igraph)
library(data.table)
library(stringr)
library(clusterProfiler)
library(ggplot2)
library(muxViz)
library(grid)
library(ggraph)
library(RColorBrewer)
library(viridis)
library(parallel)
library(ggpubr)
library(corrplot)
library(org.Hs.eg.db)
cores2use <- detectCores() - 2
"%ni%" <- Negate("%in%")
Classes <- c("Cluster_R_filtered", "Cluster_NR_filtered", "mIDH1_filtered", "mIDH2_filtered",
"Cluster_R_filtered_25k", "Cluster_NR_filtered_25k", "mIDH1_filtered_25k", "mIDH2_filtered_25k",
"Cluster_IDH2_R_25k", "Cluster_IDH2_NR_25k", "Cluster_IDH1_R_25k",
"Cluster_IDH2_R", "Cluster_IDH2_NR", "Cluster_IDH1_R")
ID_converter <- lapply(Classes, function(Class){
read.table(paste0("../../Results/Multi_layer_pheno_like/", Class, "/Multi_layer/layout.txt"),
sep = " ", header = T)
})
names(ID_converter) <- Classes
Stats <- c("degree", "strength", "pagerank",  "hub", "authority")
Versatility_analysis_mutli <- mclapply(Classes, function(Class){
res <- lapply(Stats, function(Stat){
read.table(paste0("../../Results/Multi_layer_pheno_like/New_regulon_40k/Versatility_analysis/", Class, "/New_", Stat, "_network_analysis.tsv"), sep = "\t", header = T)
})
names(res) <- Stats
res
}, mc.cores = cores2use)
names(Versatility_analysis_mutli) <- Classes
Do_class_network_analysis <- function(Node_analysis, ID_converter, Class, Stat){
stat_not_empty <- Node_analysis[[Class]][[Stat]] %>% dplyr::filter(agg > 0)
stat_not_empty <- merge(stat_not_empty, ID_converter[[Class]], by.x = "node", by.y = "nodeID", all.x = T) %>%
dplyr::filter(!stringr::str_detect(nodeLabel, pattern = "chr") & !stringr::str_detect(nodeLabel, pattern = "\\[") & !stringr::str_detect(nodeLabel, pattern = "MAR0") & !stringr::str_detect(nodeLabel, pattern = "MAR1") & stringr::str_detect(nodeLabel, pattern = "[:alpha:]"))
stat_not_empty
}
Comparison_analysis_function <- function(Class_1, Class_2, Data_versa, Stat){
stat_1 <- Data_versa[[Class_1]][[Stat]]
stat_2 <- Data_versa[[Class_2]][[Stat]]
stat_1 <- dplyr::filter(stat_1, nodeLabel %in% stat_2$nodeLabel)
stat_2 <- dplyr::filter(stat_2, nodeLabel %in% stat_1$nodeLabel)
colnames(stat_1) <- paste0(Class_1, "_", colnames(stat_1))
colnames(stat_2) <- paste0(Class_2, "_", colnames(stat_2))
colnames(stat_1)[ncol(stat_1)] <- "nodeLabel"
colnames(stat_2)[ncol(stat_2)] <- "nodeLabel"
res <- merge(stat_1, stat_2, by = "nodeLabel")
if(ncol(res) == 15){
res[c(1, 3, 10, 4, 11, 6, 13, 7, 14)]
}else if(ncol(res) == 13){
res[c(1, 3, 9, 5, 11, 6, 12)]
}else{
res
}
}
Comparisons <- list(
"Clusters" = c("Cluster_NR_filtered", "Cluster_R_filtered"),
"Clusters_25k" = c("Cluster_NR_filtered_25k", "Cluster_R_filtered_25k"),
"mIDH" = c("mIDH2_filtered", "mIDH1_filtered"),
"mIDH_25k" = c("mIDH2_filtered_25k", "mIDH1_filtered_25k"),
"IDH2s" = c("Cluster_IDH2_R", "Cluster_IDH2_NR"),
"IDH2s_25k" = c("Cluster_IDH2_R_25k", "Cluster_IDH2_NR_25k"),
"IDHs_Cluster_R" = c("Cluster_IDH1_R", "Cluster_IDH2_R"),
"IDHs_Cluster_R_25k" = c("Cluster_IDH1_R_25k", "Cluster_IDH2_R_25k"),
"mIDH2_vs_Cluster_NR" = c("mIDH2_filtered", "Cluster_NR_filtered"),
"mIDH2_vs_Cluster_NR_25k" = c("mIDH2_filtered_25k", "Cluster_NR_filtered_25k"),
"mIDH1_vs_Cluster_NR" = c("mIDH1_filtered", "Cluster_NR_filtered"),
"mIDH1_vs_Cluster_NR_25k" = c("mIDH1_filtered_25k", "Cluster_NR_filtered_25k")
)
Versatility_analysis_mutli_annotated <- mclapply(Classes, function(Class){
res <- mclapply(Stats, function(Stat){
Do_class_network_analysis(Versatility_analysis_mutli, ID_converter, Class, Stat)
}, mc.cores = cores2use)
names(res) <- Stats
res
}, mc.cores = cores2use)
names(Versatility_analysis_mutli_annotated) <- Classes
Comparisons_Versatilities <- mclapply(names(Comparisons), function(Comp){
tmp <- mclapply(Stats, function(stat){
Comparison_analysis_function(Comparisons[[Comp]][1], Comparisons[[Comp]][2], Versatility_analysis_mutli_annotated, stat)
}, mc.cores = cores2use)
names(tmp) <- Stats
tmp
}, mc.cores = cores2use)
names(Comparisons_Versatilities) <- names(Comparisons)
# save.image("/media/alexis/DATA/Session/R_session/Thesis_paper_Rsessions/Multi_layer_phenolike/Analysing_Multilayer_Versatility_2.0.RData")
# system("bash ~/shutdown_o_clock.sh")
Top_diff_function <- function(Comparison_data, Column_stat){
comp_data <- Comparison_data[which(Comparison_data[,Column_stat] != 0 & Comparison_data[,(Column_stat+1)] != 0),]
if(nrow(comp_data) < 2){
print(paste("no data", Column_stat))
return(NULL)
}
variable_A <- comp_data[Column_stat] %>% unlist
variable_B <- comp_data[Column_stat+1] %>% unlist
linear_reg <- lm(variable_A ~ variable_B)
c <- linear_reg$coefficients[1]
b <- -1
a <- linear_reg$coefficients[2]
summary_lm <- summary(linear_reg)
if("fstatistic" %ni% names(summary_lm)){
return(NULL)
}else if("fstatistic" %in% names(summary_lm)){
test <- summary_lm$fstatistic[1]
test2 <- summary(summary_lm$residuals)[3]
if(test < 1 | is.nan(test) | test2 == 0){
return(NULL)
}
}
df_4_plot <- comp_data[,c(1, Column_stat, Column_stat+1)]
p <- ggscatter(df_4_plot, x = colnames(df_4_plot)[2], y = colnames(df_4_plot)[3],
size = 0.5)+
labs(x = colnames(df_4_plot)[2],
y = colnames(df_4_plot)[3])+
geom_abline(intercept = c, slope = a)+
geom_abline(intercept = 0, slope = 1)+
stat_regline_equation()+
stat_cor(label.y = 0.8)
distance_reg <- sapply(1:nrow(comp_data), function(node){
num <- (a*variable_A[node] + b * variable_B[node] + c)
denum <- sqrt(a**2+b**2)
res <- num/denum
round(res, digits=4) %>% unlist
})
distance_prop <- sapply(1:nrow(comp_data), function(node){
num <- (1*variable_A[node] + b * variable_B[node] + 0)
denum <- sqrt(1**2+b**2)
res <- num/denum
round(res, digits=4) %>% unlist
})
final_res <- data.table("nodeLabel" = comp_data["nodeLabel"], "Distance_reg" = distance_reg, "Distance_proportionnelle" = distance_prop) %>% dplyr::filter(Distance_reg !=0 | Distance_proportionnelle != 0)
list("plot" = p, "Comparison_data" = final_res)
}
Comparisons <- names(Comparisons_Versatilities)
Top_diff_results <- lapply(Comparisons, function(Comparison){
stat_res <- lapply(Stats, function(Stat){
nc <- (ncol(Comparisons_Versatilities[[Comparison]][[Stat]]) - 1)
tmp <- Comparisons_Versatilities[[Comparison]][[Stat]]
res <- lapply(seq(2, nc, by= 2), function(type_of_analysis){
Top_diff_function(tmp, type_of_analysis)
})
names(res) <- colnames(tmp)[seq(2, nc, by= 2)] %>%
stringr::str_replace_all(pattern = "Cluster_NR_", replacement = "") %>%
stringr::str_replace_all(pattern = "mIDH1_", replacement = "")
res
})
names(stat_res) <- Stats
stat_res
})
names(Top_diff_results) <- Comparisons
lapply(names(Top_diff_results), function(Comp){
lapply(names(Top_diff_results[[Comp]]), function(Stat){
lapply(names(Top_diff_results[[Comp]][[Stat]]), function(analysis){
if(is.null(Top_diff_results[[Comp]][[Stat]][[analysis]])){
return(NULL)
}else{
Top_diff_results[[Comp]][[Stat]][[analysis]]$plot
}
})
})
})
mart <- useMart('ENSEMBL_MART_ENSEMBL')
mart <- useDataset('hsapiens_gene_ensembl', mart)
attrmart <- listAttributes(mart)
annotLookup <- getBM(
mart = mart,
attributes = c(
'hgnc_symbol',
'entrezgene_id'),
uniqueRows = TRUE)
Make_genes_ensembl <- function(Genes_df, n_top_elements){
ensembl_genes <- merge(Genes_df, annotLookup, by.x = "nodeLabel.nodeLabel", by.y = "hgnc_symbol", all.x = F, all.y = F) %>%
na.omit
ensembl_genes$distance_abs <- abs(ensembl_genes$Distance_proportionnelle)
third_quartile <- ensembl_genes$distance_abs %>% summary %>% .[5]
ensembl_genes <- ensembl_genes %>% .[order(.$distance_abs, decreasing = T),]
top_diff_genes <- dplyr::filter(ensembl_genes, distance_abs > third_quartile)
elements <- ifelse(nrow(top_diff_genes) > n_top_elements, n_top_elements, nrow(top_diff_genes))
ensembl_genes[1:elements,]
}
Make_enrichggplot <- function(gsea, Title){
y <- arrange(gsea, abs(NES)) %>%
group_by(sign(NES)) %>%
dplyr::slice(1:5)
res <- ggplot(y, aes(NES, fct_reorder(Description, NES), fill=pvalue), showCategory=10) +
geom_col(orientation='y') +
scale_fill_continuous(low='red', high='blue', guide=guide_colorbar(reverse=TRUE)) +
theme_minimal() + ylab(NULL) + ggtitle(Title)
res
}
Enrichments_plots <- function(GeneSetEnrichment, Title, EnrichmentName, Genes_ENTREZ){
print(paste(Title, EnrichmentName))
if(!is.null(GeneSetEnrichment)){
GeneSetEnrichment_sign <- GeneSetEnrichment@result %>% dplyr::filter(pvalue < 0.1 & setSize > 1) %>% nrow
if(GeneSetEnrichment_sign > 0){
y <- Make_enrichggplot(GeneSetEnrichment, paste(Title, EnrichmentName))
tmp <- GeneSetEnrichment
tmp@result <- tmp@result %>% dplyr::filter(setSize > 1)
max_geneset <- tmp@result %>% dplyr::filter(pvalue < 0.1) %>% nrow
edox <- setReadable(tmp, 'org.Hs.eg.db', 'ENTREZID')
options(ggrepel.max.overlaps = Inf)
max_geneset <- ifelse(max_geneset > 40, 40, max_geneset)
v <- cnetplot(edox, foldChange=Genes_ENTREZ, node_label = "all") + ggtitle(paste(Title, EnrichmentName))
list("Enrichment_barplot" = y,
"Cnetplot" = v,
"Readable_enrichment" = edox)
}else{
NULL
}
}else{
NULL
}
}
Do_enrichment_analysis <- function(Genes_ENTREZ, Title){
genes_ENTREZ <- Genes_ENTREZ[order(Genes_ENTREZ, decreasing = T)]
dse <- tryCatch(
{
gseDO(genes_ENTREZ, pAdjustMethod = "none", pvalueCutoff = 0.1, minGSSize = 1, verbose = F)
},
error = function(cond) {
message("ERROR")
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
return(NULL)
}
)
message("KEGG Starting")
kse <- tryCatch(
{
gseKEGG(genes_ENTREZ, minGSSize = 2, pvalueCutoff = 0.1, pAdjustMethod = "none", verbose = F, organism = 'hsa', keyType = 'ncbi-geneid')
},
error = function(cond) {
message("ERROR")
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
return(NULL)
}
)
message("KEGG DONE")
message("Wiki in progress")
wse <- tryCatch(
{
gseWP(genes_ENTREZ, minGSSize = 2, pvalueCutoff = 0.1, pAdjustMethod = "none", verbose = F, organism = "Homo sapiens")
},
error = function(cond) {
message("ERROR")
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
return(NULL)
}
)
message("Reactome in progress")
rse <- tryCatch(
{
gsePathway(genes_ENTREZ, pvalueCutoff = 0.2, pAdjustMethod = "BH", verbose = F)
},
error = function(cond) {
message("ERROR")
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
return(NULL)
}
)
dose_enrich <- Enrichments_plots(dse, Title, "Dose", genes_ENTREZ)
kegg_enrich <- Enrichments_plots(kse, Title, "KEGG", genes_ENTREZ)
wiki_enrich <- Enrichments_plots(wse, Title, "WikiPath", genes_ENTREZ)
list("DOSE" = dose_enrich,
"KEGG" = kegg_enrich,
"WIKIpathway" = wiki_enrich,
"Reactome_Pathway" = rse)
}
Do_gene_ontology_Kegg_analysis <- function(Stat_data, n_elements, Title, only_both){
if(is.null(Stat_data)){
return(NULL)
}
if(nrow(Stat_data) == 0){
return(NULL)
}
genes_up <- Stat_data %>% dplyr::filter(Distance_proportionnelle > 0)
genes_down <- Stat_data %>% dplyr::filter(Distance_proportionnelle < 0)
genes_up_ensembl <- Make_genes_ensembl(genes_up, n_elements)
genes_down_ensembl <- Make_genes_ensembl(genes_down, n_elements)
genes_up_ensembl_c <- genes_up_ensembl$distance_abs
names(genes_up_ensembl_c) <- genes_up_ensembl$entrezgene_id
genes_down_ensembl_c <- genes_down_ensembl$distance_abs
names(genes_down_ensembl_c) <- genes_down_ensembl$entrezgene_id
genes_ensembl_c <- genes_down_ensembl$Distance_proportionnelle
names(genes_ensembl_c) <- genes_down_ensembl$entrezgene_id
mid_top <- floor(n_elements/2)
mid_bot <- n_elements + mid_top
genes_ensembl_c <- c(genes_up_ensembl_c, genes_ensembl_c)
genes_ensembl_c <- genes_ensembl_c %>% .[c(1:mid_top,n_elements:mid_bot)]
genes_ensembl_c <- genes_ensembl_c[order(genes_ensembl_c, decreasing = T)]
if(only_both){
enrichments_upndown <- Do_enrichment_analysis(genes_ensembl_c, paste(Title, ""))
}else{
enrichments_up <- Do_enrichment_analysis(genes_up_ensembl_c, paste(Title, "up"))
enrichments_down <- Do_enrichment_analysis(genes_down_ensembl_c, paste(Title, "down"))
enrichments_upndown <- Do_enrichment_analysis(genes_ensembl_c, paste(Title, ""))
}
if(only_both){
list("Enrichments"= enrichments_upndown,
"genelists" = genes_ensembl_c)
}else{
list("Enrichments"= list("UP" = enrichments_up,
"DOWN" = enrichments_down,
"BOTH" = enrichments_upndown),
"genelists" = list("Ensembl_UP" = genes_up_ensembl_c,
"Ensembl_Down" = genes_down_ensembl_c,
"Ensemble" = genes_ensembl_c,
"UP" = genes_up$nodeLabel.nodeLabel,
"Down" = genes_down$nodeLabel.nodeLabel))
}
}
Gene_enrichments_analysis_300 <- lapply(names(Top_diff_results), function(Comp){
res2 <- lapply(names(Top_diff_results[[Comp]]), function(Stat){
analyses <- ifelse(length(names(Top_diff_results[[Comp]][[Stat]])) == 4, 2, 1)
res <- lapply(names(Top_diff_results[[Comp]][[Stat]])[1:analyses], function(Type_of_analysis){
title <- paste(Comp, Stat, Type_of_analysis, sep = "_")
Top_diff_results[[Comp]][[Stat]][[Type_of_analysis]][["Enrichments"]] <- Do_gene_ontology_Kegg_analysis(Top_diff_results[[Comp]][[Stat]][[Type_of_analysis]][["Comparison_data"]], 300, title, only_both = F)
})
names(res) <- names(Top_diff_results[[Comp]][[Stat]])[1:analyses]
res
})
names(res2) <- names(Top_diff_results[[Comp]])
res2
})
names(Gene_enrichments_analysis_300) <- names(Top_diff_results)
Gene_enrichments_analysis_150 <- lapply(names(Top_diff_results), function(Comp){
res2 <- lapply(names(Top_diff_results[[Comp]]), function(Stat){
analyses <- ifelse(length(names(Top_diff_results[[Comp]][[Stat]])) == 4, 2, 1)
res <- lapply(names(Top_diff_results[[Comp]][[Stat]])[1:analyses], function(Type_of_analysis){
title <- paste(Comp, Stat, Type_of_analysis, sep = "_")
Top_diff_results[[Comp]][[Stat]][[Type_of_analysis]][["Enrichments"]] <- Do_gene_ontology_Kegg_analysis(Top_diff_results[[Comp]][[Stat]][[Type_of_analysis]][["Comparison_data"]], 150, title, only_both = F)
})
names(res) <- names(Top_diff_results[[Comp]][[Stat]])[1:analyses]
res
})
names(res2) <- names(Top_diff_results[[Comp]])
res2
})
names(Gene_enrichments_analysis_150) <- names(Top_diff_results)
lapply(names(Gene_enrichments_analysis_150), function(Comparison){
dir.create(paste0("../../Results/Multi_layer_pheno_like/New_regulon_40k/Versatility_analysis/Enrichments/",
Comparison), showWarnings = F)
lapply(names(Gene_enrichments_analysis_150[[Comparison]]), function(Stat){
lapply(names(Gene_enrichments_analysis_150[[Comparison]][[Stat]]), function(type_of_analysis){
if(is.null(Gene_enrichments_analysis_150[[Comparison]][[Stat]][[type_of_analysis]])){
return(NULL)
}else{
lapply(names(Gene_enrichments_analysis_150[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]]), function(Sign){
lapply(names(Gene_enrichments_analysis_150[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]][[Sign]])[1:3], function(GO){
dir.create(paste0("../../Results/Multi_layer_pheno_like/New_regulon_40k/Versatility_analysis/Enrichments/",
Comparison, "/", GO), showWarnings = F)
a <- Gene_enrichments_analysis_150[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]][[Sign]][[GO]][["Cnetplot"]]
b <- Gene_enrichments_analysis_150[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]][[Sign]][[GO]][["Enrichment_barplot"]]
c <- Gene_enrichments_analysis_150[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]][[Sign]][[GO]][["Readable_enrichment"]]
tryCatch({ggsave(paste0("../../Results/Multi_layer_pheno_like/New_regulon_40k/Versatility_analysis/Enrichments/", Comparison, "/", GO, "/Cnetplot_", GO, "_", Stat, "_", type_of_analysis, "_", Sign, ".png"),
a, bg = 'white', width = 1920, height = 1080, units = "px", scale = 3)}, error = function(cond) {return(NULL)})
tryCatch({ggsave(paste0("../../Results/Multi_layer_pheno_like/New_regulon_40k/Versatility_analysis/Enrichments/", Comparison, "/", GO, "/Barplot_", GO, "_", Stat, "_", type_of_analysis, "_", Sign, ".png"),
b, bg = 'white', width = 1920, height = 1080, units = "px", scale = 3)}, error = function(cond) {return(NULL)})
write.table(c, paste0("../../Results/Multi_layer_pheno_like/New_regulon_40k/Versatility_analysis/Enrichments/", Comparison, "/", GO, "/Table_", GO, "_", Stat, "_", type_of_analysis, "_", Sign, ".tsv"),
sep = "\t", quote = F, row.names = F)
})
})
}
})
})
})
lapply(names(Gene_enrichments_analysis_300), function(Comparison){
dir.create(paste0("../../Results/Multi_layer_pheno_like/New_regulon_40k/Versatility_analysis/Enrichments_top300/",
Comparison), showWarnings = F)
lapply(names(Gene_enrichments_analysis_300[[Comparison]]), function(Stat){
lapply(names(Gene_enrichments_analysis_300[[Comparison]][[Stat]]), function(type_of_analysis){
if(is.null(Gene_enrichments_analysis_300[[Comparison]][[Stat]][[type_of_analysis]])){
return(NULL)
}else{
lapply(names(Gene_enrichments_analysis_300[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]]), function(Sign){
lapply(names(Gene_enrichments_analysis_300[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]][[Sign]])[1:3], function(GO){
dir.create(paste0("../../Results/Multi_layer_pheno_like/New_regulon_40k/Versatility_analysis/Enrichments_top300/",
Comparison, "/", GO), showWarnings = F)
a <- Gene_enrichments_analysis_300[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]][[Sign]][[GO]][["Cnetplot"]]
b <- Gene_enrichments_analysis_300[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]][[Sign]][[GO]][["Enrichment_barplot"]]
c <- Gene_enrichments_analysis_300[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]][[Sign]][[GO]][["Readable_enrichment"]]
tryCatch({ggsave(paste0("../../Results/Multi_layer_pheno_like/New_regulon_40k/Versatility_analysis/Enrichments_top300/", Comparison, "/", GO, "/Cnetplot_", GO, "_", Stat, "_", type_of_analysis, "_", Sign, ".png"),
a, bg = 'white', width = 1920, height = 1080, units = "px", scale = 3)}, error = function(cond) {return(NULL)})
tryCatch({ggsave(paste0("../../Results/Multi_layer_pheno_like/New_regulon_40k/Versatility_analysis/Enrichments_top300/", Comparison, "/", GO, "/Barplot_", GO, "_", Stat, "_", type_of_analysis, "_", Sign, ".png"),
b, bg = 'white', width = 1920, height = 1080, units = "px", scale = 3)}, error = function(cond) {return(NULL)})
write.table(c, paste0("../../Results/Multi_layer_pheno_like/New_regulon_40k/Versatility_analysis/Enrichments_top300/", Comparison, "/", GO, "/Table_", GO, "_", Stat, "_", type_of_analysis, "_", Sign, ".tsv"),
sep = "\t", quote = F, row.names = F)
})
})
}
})
})
return(NULL)
})
Genes_importants <- lapply(names(Gene_enrichments_analysis_150), function(Comparison){
d <- lapply(names(Gene_enrichments_analysis_150[[Comparison]]), function(Stat){
c <- lapply(names(Gene_enrichments_analysis_150[[Comparison]][[Stat]]), function(type_of_analysis){
if(is.null(Gene_enrichments_analysis_150[[Comparison]][[Stat]][[type_of_analysis]])){
return(NULL)
}else{
b <- lapply(names(Gene_enrichments_analysis_150[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]]), function(Sign){
a <- lapply(names(Gene_enrichments_analysis_150[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]][[Sign]])[1:3], function(GO){
if(nrow(Gene_enrichments_analysis_150[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]][[Sign]][[GO]][["Readable_enrichment"]]@result) != 0){
sign_of_analysis <- ifelse(Sign == "DOWN", -1, 1)
up_genes <- Gene_enrichments_analysis_150[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]][[Sign]][[GO]][["Readable_enrichment"]]@result %>%
dplyr::filter((sign_of_analysis * NES) > 0) %>% .$core_enrichment %>%
stringr::str_split("\\/") %>% unlist %>% unique
down_genes <- Gene_enrichments_analysis_150[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]][[Sign]][[GO]][["Readable_enrichment"]]@result %>%
dplyr::filter((sign_of_analysis * NES) < 0) %>% .$core_enrichment %>%
stringr::str_split("\\/") %>% unlist %>% unique
list("UP" = up_genes, "Down" = down_genes)
}else{
NULL
}
})
names(a) <- names(Gene_enrichments_analysis_150[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]][[Sign]])[1:3]
a
})
names(b) <- names(Gene_enrichments_analysis_150[[Comparison]][[Stat]][[type_of_analysis]][["Enrichments"]])
b
}
})
names(c) <- names(Gene_enrichments_analysis_150[[Comparison]][[Stat]])
c
})
names(d) <- names(Gene_enrichments_analysis_150[[Comparison]])
d
e <- lapply(c("UP", "Down"), function(Sign){
lapply(names(d), function(Stat){
lapply(names(d[[Stat]]), function(type_of_analysis){
lapply(names(d[[Stat]][[type_of_analysis]]), function(sign_analysis){
lapply(names(d[[Stat]][[type_of_analysis]][[sign_analysis]]), function(GO){
d[[Stat]][[type_of_analysis]][[sign_analysis]][[GO]][[Sign]]
}) %>% unlist %>% unique
}) %>% unlist %>% unique
})%>% unlist %>% unique
})%>% unlist %>% unique
})
names(e) <- c("UP", "DOWN")
e
})
save.image("/media/alexis/DATA/Session/R_session/Thesis_paper_Rsessions/Multi_layer_phenolike/Analysing_Multilayer_Versatility_300.RData")
